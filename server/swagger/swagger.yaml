openapi: 3.0.2
info:
  version: "1.0.0"
  title: "Prello"

servers:
  - url: http://localhost:5000

paths:
  /api/public/register:
    post:
      summary: Register to the application
      security: []   # No security
      tags:
        - users
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Register successfull
        '409':
          description: Email or userName already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Servor error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  
  /api/public/login:
    post:
      summary: Log to the application
      security: []   # No security
      tags:
        - users
      requestBody:
        description: User credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        '201':
          description: Login successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        '422':
          description: Email or password empty
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/user/{userId} :
    get:
      summary: Get a user with an id
      security:
        - token: []
      tags:
        - users
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '201':
          description: User sucessfully fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/user/{userName} :
    put:
      summary: Update a user
      security:
        - token: []
      tags:
        - users
      parameters:
        - name: userName
          in: path
          description: User Name
          required: true
          schema:
            type: string
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '201':
          description: User sucessfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '409':
          description: Email or userName already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/user/findByBeginName{query} :
    get:
      summary: Get all users with a name beginning by a query
      security:
        - token: []
      tags:
        - users
      parameters:
        - name: query
          in: path
          description: Begin of the name
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Users sucessfully fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        '404':
          description: The query found no user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  
  /api/private/team/create:
    post:
      summary: Add a team
      security:
        - token: []
      tags:
        - teams
      requestBody:
        description: Team details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        '201':
          description: Team create successfull
        '409':
          description: Team name already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Servor error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/team/member/{teamId} :
    get:
      summary: Get a team with an id
      security:
        - token: []
      tags:
        - teams
      parameters:
        - name: teamId
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Team sucessfully fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        '404':
          description: Team not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/team/admin/{teamId}/update:
    put:
      summary: Update a team
      security:
        - token: []
      tags:
        - teams
      parameters:
        - name: teamId
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        description: Team details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTeam'
      responses:
        '201':
          description: Team sucessfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        '404':
          description: Team not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '409':
          description: Team name already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/user/{userId}/teams :
    get:
      summary: Get all the teams for a user
      security:
        - token: []
      tags:
        - teams
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Teams sucessfully fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Teams"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/team/admin/{teamId}/add/user/{userName} :
    post:
      summary: Add a member to a team
      security:
        - token: []
      tags:
        - teams
      parameters:
        - name: teamId
          in: path
          description: Team ID
          required: true
          schema:
            type: string
        - name: userName
          in: path
          description: UserName
          required: true
          schema:
            type: string
      responses:
        '201':
          description: User sucessfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        '404':
          description: User or Team not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/team/admin/{teamId}/delete/user/{userId} :
    delete:
      summary: Delete a member from a team
      security:
        - token: []
      tags:
        - teams
      parameters:
        - name: teamId
          in: path
          description: Team ID
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '201':
          description: User sucessfully deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        '404':
          description: User or Team not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/team/admin/{teamId}/update/user/role/{userId}:
    put:
      summary: Change the role of a user in the team (admin or not)
      security:
        - token: []
      tags:
        - teams
      parameters:
        - name: teamId
          in: path
          description: Team ID
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      requestBody:
        description: if the user will be admin or not
        required: false
        content:
          application/json:
            schema:      # Request body contents
              type: object
              properties:
                isAdmin:
                  type: boolean
              example:   # Sample object
                isAdmin: true
      responses:
        '201':
          description: User role sucessfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        '404':
          description: User or Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/team/admin/delete/{teamId} :
    delete:
      summary: Delete a team
      security:
        - token: []
      tags:
        - teams
      parameters:
        - name: teamId
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Team sucessfully deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        '404':
          description: User or Team not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/team/findByBeginName{query} :
    get:
      summary: Get all teams with a name beginning by a query
      security:
        - token: []
      tags:
        - teams
      parameters:
        - name: query
          in: path
          description: Begin of the name
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Teams sucessfully fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Teams"
        '404':
          description: The query found no team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/board/create:
    post:
      summary: Add a board
      security:
        - token: []
      tags:
        - boards
      requestBody:
        description: Board details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Board'
      responses:
        '201':
          description: Board create successfull
        '409':
          description: Board name already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Servor error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/board/member/{boardId} :
    get:
      summary: Get a board with an id
      security:
        - token: []
      tags:
        - boards
      parameters:
        - name: boardId
          in: path
          description: Board ID
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Board sucessfully fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Board"
        '404':
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/board/admin/{boardId}/update:
    put:
      summary: Update a board
      security:
        - token: []
      tags:
        - boards
      parameters:
        - name: boardId
          in: path
          description: Board ID
          required: true
          schema:
            type: string
      requestBody:
        description: Board details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBoard'
      responses:
        '201':
          description: Board sucessfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Board"
        '404':
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/user/{userId}/boards :
    get:
      summary: Get all the boards for a user
      security:
        - token: []
      tags:
        - boards
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Boards sucessfully fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Boards"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/board/admin/{boardId}/add/user/{memberUserName}:
    post:
      summary: Add a member to a board
      security:
        - token: []
      tags:
        - boards
      parameters:
        - name: boardId
          in: path
          description: Board ID
          required: true
          schema:
            type: string
        - name: memberUserName
          in: path
          description: User Name
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Board sucessfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Board"
        '404':
          description: User or Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/board/admin/{boardId}/delete/user/{userId}:
    delete:
      summary: Delete a member from a board
      security:
        - token: []
      tags:
        - boards
      parameters:
        - name: boardId
          in: path
          description: Board ID
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '201':
          description: User sucessfully deleted from the board
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        '404':
          description: User or Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/board/admin/{boardId}/update/user/role/{userId}:
    put:
      summary: Change the role of a user in the board (admin or not)
      security:
        - token: []
      tags:
        - boards
      parameters:
        - name: boardId
          in: path
          description: Board ID
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      requestBody:
        description: if the user will be admin or not
        required: false
        content:
          application/json:
            schema:      # Request body contents
              type: object
              properties:
                isAdmin:
                  type: boolean
              example:   # Sample object
                isAdmin: true
      responses:
        '201':
          description: User role sucessfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Board"
        '404':
          description: User or Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/board/admin/{boardId}/add/team/{teamName}:
    post:
      summary: add a team to the board
      security:
        - token: []
      tags:
        - boards
      parameters:
        - name: boardId
          in: path
          description: Board ID
          required: true
          schema:
            type: string
        - name: teamName
          in: path
          description: Team Name
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Team sucessfully added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        '404':
          description: Team or Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


  /api/private/board/admin/{boardId}/delete/team/{teamId}:
    delete:
      summary: Delete a team from a board
      security:
        - token: []
      tags:
        - boards
      parameters:
        - name: boardId
          in: path
          description: Board ID
          required: true
          schema:
            type: string
        - name: teamId
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Team sucessfully deleted from the board
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        '404':
          description: User or Team not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/board/member/list/create:
    post:
      summary: Add a list to a board
      security:
        - token: []
      tags:
        - lists
      requestBody:
        description: List details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/List'
      responses:
        '201':
          description: List create successfull
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Servor error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/board/member/list/{listId} :
    get:
      summary: Get a list from a board
      security:
        - token: []
      tags:
        - lists
      parameters:
        - name: listId
          in: path
          description: List ID
          required: true
          schema:
            type: string
      responses:
        '201':
          description: List sucessfully fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/List"
        '404':
          description: List not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/board/member/list/{listId}/rename:
    put:
      summary: Update a list from a board
      security:
        - token: []
      tags:
        - lists
      parameters:
        - name: listId
          in: path
          description: List ID
          required: true
          schema:
            type: string
      requestBody:
        description: List details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateList'
      responses:
        '201':
          description: List sucessfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/List"
        '404':
          description: List not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/board/member/list/{listId}/archive:
    put:
      summary: Archive or unarchive a list from a board
      security:
        - token: []
      tags:
        - lists
      parameters:
        - name: listId
          in: path
          description: List ID
          required: true
          schema:
            type: string
      requestBody:
        description: if the list will be archived or unarchived
        required: true
        content:
          application/json:
            schema:      # Request body contents
              type: object
              properties:
                isArchived:
                  type: boolean
              example:   # Sample object
                isArchived: true
      responses:
        '201':
          description: List archived status sucessfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/List"
        '404':
          description: List not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/private/board/member/card/create:
    post:
      summary: Add a card in a list
      security:
        - token: []
      tags:
        - cards
      requestBody:
        description: Card name
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Card'
      responses:
        '201':
          description: Card create successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: List or card not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Servor error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  securitySchemes:
    token:
      description: "JWT authorization"
      type: http
      scheme: bearer
      in: header
      bearerFormat: JWT

  security:
    - token: ''

  schemas:
    Error:
      required:
        - message
      properties:
        message:
          type: string

    Token:
      required:
        - token
      properties:
        token:
          type: string

    UserCredentials:
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    User:
      required:
        - firstName
        - lastName
        - userName
        - email
        - password
        - password2
      properties:
        firstName:
          type: string
        lastName:
          type: string
        userName:
          type: string
        email:
          type: string
        password:
          type: string
        password2:
          type: string

    Users:
      type: array
        items:
          $ref: "#/components/schemas/User"

    UpdateUser:
      required:
        - firstName
        - lastName
        - userName
        - email
      properties:
        firstName:
          type: string
        lastName:
          type: string
        userName:
          type: string
        email:
          type: string

    Team:
      required:
        - name
        - boards
        - members
      properties:
        name:
          type: string
        description:
          type: string
        boards:
          $ref: "#/components/schemas/Boards"
          default: []
        members:
          $ref: "#/components/schemas/TeamMembers"
          default: []

    UpdateTeam:
      required:
        - name
        - description
      properties:
        name:
          type: string
        description:
          type: string

    Teams:
      type: array
        items:
          $ref: "#/components/schemas/Team"

    Boards:
      type: array
        items:
          $ref: "#/components/schemas/Board"

    UpdateBoard:
      required:
        - name
        - description
      properties:
        name:
          type: string
        description:
          type: string

    TeamMembers:
      type: array
        items:
          $ref: "#/components/schemas/TeamMember"

    TeamMember:
      required:
        - idUser
        - isAdmin
      properties:
        idUser:
          type: string
        isAdmin:
          type: boolean
          default: false

    Board:
      required:
        - name
        - members
        - closed
        - labelNames
      properties:
        name:
          type: string
        description:
          type: string
        members:
          $ref: "#/components/schemas/BoardMembers"
          default: []
        team:
          type: string
        isArchived:
          type: boolean
          default: false
        lists:
          $ref: "#/components/schemas/Lists"
          default: []
        labelNames:
          $ref: "#/components/schemas/LabelNames"

    BoardMembers:
      type: array
      items:
        $ref: "#/components/schemas/BoardMember"

    BoardMember:
      required:
        - idUser
        - admin
        - teamMember
      properties:
        idUser:
          type: string
        admin:
          type: boolean
          default: false
        teamMember:
          type: boolean
          default: false

    LabelNames:
      properties:
        green:
          type: string
        yellow:
          type: string
        orange:
          type: string
        red:
          type: string
        purple:
          type: string
        blue:
          type: string
        pink:
          type: string

    List:
      required:
        - name
      properties:
        name:
          type: string
        isArchived:
          type: boolean
          default: false

    Lists:
      type: array
        items:
          $ref: "#/components/schemas/List"

    UpdateList:
      required:
        - name
      properties:
        name:
          type: string

    Card:
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        dueDate:
          $ref: "#/components/schemas/DueDate"
        isArchived:
          type: boolean
          default: false
        members:
          $ref: "#/components/schemas/Users"

    Cards:
      type: array
        items:
          $ref: "#/components/schemas/Card"

    DueDate:
      required:
        - date
      properties:
        date:
          type: date
        isDone:
          type: boolean
          default: false
    